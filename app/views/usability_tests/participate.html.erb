<div class="container mx-auto px-4 py-8">
  <div class="max-w-2xl mx-auto">
    <div class="bg-white rounded shadow p-6 mb-6">
      <h1 class="text-2xl font-bold mb-2"><%= @test.title %></h1>
      <p class="text-gray-600 mb-6"><%= @test.description %></p>
      
      <div class="bg-blue-50 border-l-4 border-blue-500 p-4 mb-6">
        <h2 class="text-lg font-semibold mb-2">タスク:</h2>
        <div class="text-blue-800">
          <%= simple_format(@test.task) %>
        </div>
      </div>
      
      <div class="mb-6">
        <button id="start-test" class="w-full bg-blue-500 hover:bg-blue-600 text-white px-4 py-3 rounded-lg font-medium transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50">
          テストを開始
        </button>
      </div>
      
      <div id="test-in-progress" class="hidden">
        <div class="flex justify-between items-center mb-4">
          <span class="text-lg font-semibold">タスク実行中...</span>
          <span id="timer" class="text-xl font-bold">00:00</span>
        </div>
        
        <div class="flex space-x-4 mb-6">
          <button id="complete-success" class="flex-1 bg-green-500 hover:bg-green-600 text-white px-4 py-3 rounded-lg font-medium transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50">
            タスク完了
          </button>
          <button id="complete-failure" class="flex-1 bg-red-500 hover:bg-red-600 text-white px-4 py-3 rounded-lg font-medium transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-50">
            タスク中止
          </button>
        </div>
      </div>
      
      <div id="feedback-form" class="hidden">
        <%= form_with url: submit_feedback_usability_test_path(@test.token), method: :post, class: "space-y-6" do |f| %>
          <%= f.hidden_field :completion_time %>
          <%= f.hidden_field :success %>
          
          <div>
            <label for="difficulty_rating" class="block text-sm font-medium text-gray-700 mb-1">このタスクの難易度はどうでしたか？</label>
            <div class="flex items-center space-x-1">
              <% (1..5).each do |i| %>
                <button type="button" class="difficulty-star text-gray-300 hover:text-yellow-400 focus:outline-none focus:ring-2 focus:ring-yellow-400 focus:ring-opacity-50 rounded p-1" data-value="<%= i %>">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118l-2.8-2.034c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                  </svg>
                </button>
              <% end %>
              <%= f.hidden_field :difficulty_rating %>
            </div>
          </div>
          
          <div>
            <label for="feedback" class="block text-sm font-medium text-gray-700 mb-1">フィードバック（任意）</label>
            <%= f.text_area :feedback, rows: 4, class: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50", placeholder: "タスクについての感想や改善点があれば教えてください" %>
          </div>
          
          <div>
            <%= f.submit "フィードバックを送信", class: "w-full bg-blue-500 hover:bg-blue-600 text-white px-4 py-3 rounded-lg font-medium transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50" %>
          </div>
        <% end %>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('turbo:load', () => {
    let startTime;
    let timerInterval;
    let elapsedSeconds = 0;
    
    const startButton = document.getElementById('start-test');
    const testInProgress = document.getElementById('test-in-progress');
    const feedbackForm = document.getElementById('feedback-form');
    const timer = document.getElementById('timer');
    const successButton = document.getElementById('complete-success');
    const failureButton = document.getElementById('complete-failure');
    const completionTimeInput = document.querySelector('input[name="completion_time"]');
    const successInput = document.querySelector('input[name="success"]');
    const difficultyInput = document.querySelector('input[name="difficulty_rating"]');
    const difficultyStars = document.querySelectorAll('.difficulty-star');
    
    // スターの評価システム
    difficultyStars.forEach(star => {
      star.addEventListener('click', () => {
        const value = star.dataset.value;
        difficultyInput.value = value;
        
        // スターの色を更新
        difficultyStars.forEach(s => {
          if (s.dataset.value <= value) {
            s.classList.remove('text-gray-300');
            s.classList.add('text-yellow-400');
          } else {
            s.classList.remove('text-yellow-400');
            s.classList.add('text-gray-300');
          }
        });
      });
    });
    
    // タイマー関数
    function updateTimer() {
      elapsedSeconds++;
      const minutes = Math.floor(elapsedSeconds / 60);
      const seconds = elapsedSeconds % 60;
      timer.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }
    
    // テスト開始
    startButton.addEventListener('click', () => {
      startButton.classList.add('hidden');
      testInProgress.classList.remove('hidden');
      
      startTime = new Date();
      elapsedSeconds = 0;
      timerInterval = setInterval(updateTimer, 1000);
      updateTimer();
    });
    
    // タスク完了（成功）
    successButton.addEventListener('click', () => {
      clearInterval(timerInterval);
      const endTime = new Date();
      const completionTime = (endTime - startTime) / 1000;
      
      completionTimeInput.value = completionTime;
      successInput.value = true;
      
      testInProgress.classList.add('hidden');
      feedbackForm.classList.remove('hidden');
    });
    
    // タスク完了（失敗）
    failureButton.addEventListener('click', () => {
      clearInterval(timerInterval);
      const endTime = new Date();
      const completionTime = (endTime - startTime) / 1000;
      
      completionTimeInput.value = completionTime;
      successInput.value = false;
      
      testInProgress.classList.add('hidden');
      feedbackForm.classList.remove('hidden');
    });
  });
</script>
